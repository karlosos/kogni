{"version":3,"sources":["Image.js","ExperimentStep.js","ImagesFileNames.js","ExperimentFinished.js","InputName.js","App.js","index.js"],"names":["Image","source","src","className","ExperimentStep","imageSource","currentImageIndex","imagesCount","saveData","useState","isShowingImage","setIsShowingImage","Date","getTime","timeStart","setTimeStart","useEffect","date","dateFmt","Intl","DateTimeFormat","year","month","day","hour","minute","second","hour12","timeZone","format","interval","setInterval","clearInterval","submitData","imageRating","class","onClick","ImagesFileNames","ExperimentFinished","experimentData","filename","data","slice","length","InputName","setIsName","isNameInInput","setIsNameInInput","onChange","event","name","target","value","type","placeholder","aria-hidden","App","isName","fileNames","setFileNames","experimentStepData","setExperimentStepData","isExperimentFinished","setExperimentFinished","setExperimentData","console","log","preExperimentStabilization","shuffle","experimentStep","currentDataRow","experimentFinished","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb1b4fa1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Image = ({ source }) => {\r\n  return (\r\n    <img src={source} className='image' />\r\n  )\r\n}\r\n\r\nexport default Image\r\n","import React, { useState, useEffect } from 'react'\r\nimport Image from './Image'\r\n\r\nconst ExperimentStep = ({ imageSource, currentImageIndex, imagesCount, saveData }) => {\r\n  const [isShowingImage, setIsShowingImage] = useState(true)\r\n  const [timeStart, setTimeStart] = useState(new Date().getTime())\r\n\r\n  useEffect(() => {\r\n    const options = {\r\n      year: 'numeric',\r\n      month: 'numeric',\r\n      day: 'numeric',\r\n      hour: 'numeric',\r\n      minute: 'numeric',\r\n      second: 'numeric',\r\n      hour12: false,\r\n      timeZone: 'America/Los_Angeles'\r\n    }\r\n    const date = new Date()\r\n    const dateFmt = new Intl.DateTimeFormat('pl-PL', options).format(date)\r\n    setTimeStart(dateFmt)\r\n\r\n    const interval = setInterval(() => {\r\n      setIsShowingImage(false)\r\n    }, 3000)\r\n    return () => clearInterval(interval)\r\n  }, [imageSource])\r\n\r\n  const submitData = (imageRating) => {\r\n    setIsShowingImage(true)\r\n    saveData(imageRating, imageSource, timeStart)\r\n  }\r\n\r\n  return (\r\n    <section class='hero is-fullheight is-default is-bold experiment-step'>\r\n      <div class='container has-text-centered m-t-200'>\r\n        <div class='columns is-centered'>\r\n          <div class='column is-half'>\r\n            {currentImageIndex}/{imagesCount}\r\n          </div>\r\n        </div>\r\n        <div class='columns is-centered'>\r\n          <div class='column'>\r\n              Oceń w jaki sposób obrazek przyciągnął Twoją uwagę\r\n          </div>\r\n        </div>\r\n        {isShowingImage &&\r\n          <div class='columns is-vcentered imageSection'>\r\n            <Image source={'./images/' + imageSource} />\r\n          </div>}\r\n\r\n        {!isShowingImage &&\r\n          <div class='columns is-vcentered answer-section is-centered'>\r\n            <button class='button' onClick={() => submitData('bardzo drazniacy')}>Bardzo drażniący</button>\r\n            <button class='button' onClick={() => submitData('drazniacy')}>Drażniący</button>\r\n            <button class='button' onClick={() => submitData('taki sobie')}>Taki sobie</button>\r\n            <button class='button' onClick={() => submitData('przyjazny')}>Przyjazny</button>\r\n            <button class='button' onClick={() => submitData('bardzo przyjazny')}>Bardzo przyjazny</button>\r\n          </div>}\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default ExperimentStep\r\n","const ImagesFileNames = [\r\n  'BlackBlue.png',\r\n  'BlackGray.png',\r\n  'BlackGreen.png',\r\n  'BlackOrange.png',\r\n  'BlackRed.png',\r\n  'BlackViolet.png',\r\n  'BlackWhite.png',\r\n  'BlackYellow.png',\r\n  'BlueBlack.png',\r\n  'BlueGray.png',\r\n  'BlueGreen.png',\r\n  'BlueOrange.png',\r\n  'BlueRed.png',\r\n  'BlueViolet.png',\r\n  'BlueWhite.png',\r\n  'BlueYellow.png',\r\n  'GrayBlack.png',\r\n  'GrayBlue.png',\r\n  'GrayGreen.png',\r\n  'GrayOrange.png',\r\n  'GrayRed.png',\r\n  'GrayViolet.png',\r\n  'GrayWhite.png',\r\n  'GrayYellow.png',\r\n  'GreenBlack.png',\r\n  'GreenBlue.png',\r\n  'GreenGray.png',\r\n  'GreenOrange.png',\r\n  'GreenRed.png',\r\n  'GreenViolet.png',\r\n  'GreenWhite.png',\r\n  'GreenYellow.png',\r\n  'OrangeBlue.png',\r\n  'OrangeGreen (1).png',\r\n  'OrangeGreen.png',\r\n  'OrangeRed.png',\r\n  'OrangeViolet.png',\r\n  'OrangeWhite.png',\r\n  'OrangeYellow.png',\r\n  'OtangeBlack.png',\r\n  'RedBlack.png',\r\n  'RedBlue.png',\r\n  'RedGray.png',\r\n  'RedGreen.png',\r\n  'RedOrange.png',\r\n  'RedViolet.png',\r\n  'RedWhite.png',\r\n  'RedYellow.png',\r\n  'VioletBlack.png',\r\n  'VioletBlue.png',\r\n  'VioletGray.png',\r\n  'VioletGreen.png',\r\n  'VioletOrange.png',\r\n  'VioletRed.png',\r\n  'VioletWhite.png',\r\n  'VioletYellow.png',\r\n  'WhiteBlack.png',\r\n  'WhiteBlue.png',\r\n  'WhiteGray.png',\r\n  'WhiteGreen.png',\r\n  'WhiteOrange.png',\r\n  'WhiteRed.png',\r\n  'WhiteViolet.png',\r\n  'WhiteYellow.png',\r\n  'YellowBlack.png',\r\n  'YellowBlue.png',\r\n  'YellowGray.png',\r\n  'YellowGreen.png',\r\n  'YellowOrange.png',\r\n  'YellowRed.png',\r\n  'YellowViolet.png',\r\n  'YellowWhite.png'\r\n]\r\n\r\nexport default ImagesFileNames\r\n","import React from 'react'\r\nimport { CSVLink, CSVDownload } from 'react-csv'\r\n\r\nconst ExperimentFinished = ({ experimentData }) => {\r\n  return (\r\n    <section class='hero is-fullheight is-default is-bold experiment-step'>\r\n      <div class=\"hero-body\">\r\n      <div class='container has-text-centered'>\r\n        <div class='columns is-vcentered is-centered'>\r\n          <div class='column is-half'>\r\n              Eksperyment się zakończył\r\n            <div>\r\n            <CSVLink\r\n              filename='technika_pojedynczego_bodzca.csv'\r\n              className='button'\r\n              data={[...experimentData.slice(0, 1), ...experimentData.slice(4, experimentData.length)]}\r\n              // enclosingCharacter=''\r\n            >\r\n               Pobierz CSV\r\n            </CSVLink>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default ExperimentFinished\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst InputName = ({setIsName}) => {\r\n\r\n  const [isNameInInput, setIsNameInInput] = useState('')\r\n\r\n  const saveName = (name) => {\r\n    setIsNameInInput(name)\r\n  }\r\n\r\n  const start = () => {\r\n    setIsName(isNameInInput)\r\n  }\r\n\r\n\r\n  return (\r\n    <section class='hero is-fullheight is-default is-bold experiment-step'>\r\n      <div class=\"hero-body\">\r\n\r\n      <div class='container has-text-centered'>\r\n        <div class='columns is-centered'>\r\n          <div class=\"column is-5\">\r\n            <div class=\"field\">\r\n              <div class=\"control\">\r\n                <input onChange={event => saveName(event.target.value)} class=\"input\" type=\"text\" placeholder=\"Podaj imie\"/>\r\n              </div>\r\n            </div>\r\n            <button onClick={() => start()} class=\"button is-block is-info is-fullwidth\">Zacznij badanie <i class=\"fa fa-sign-in\" aria-hidden=\"true\"></i></button>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default InputName\r\n","import React, { useState, useEffect } from 'react'\r\nimport './App.scss'\r\nimport ExperimentStep from './ExperimentStep'\r\nimport ImagesFileNames from './ImagesFileNames'\r\nimport shuffle from 'shuffle-x'\r\nimport ExperimentFinished from './ExperimentFinished'\r\nimport InputName from './InputName'\r\n\r\nfunction App () {\r\n  const [isName, setIsName] = useState('')\r\n  const [fileNames, setFileNames] = useState([])\r\n  const [experimentStepData, setExperimentStepData] = useState('')\r\n  const [isExperimentFinished, setExperimentFinished] = useState(false)\r\n  const [experimentData, setExperimentData] = useState([['user', 'obraz', 'ocena', 'system_czas']])\r\n\r\n  console.log(fileNames)\r\n\r\n  useEffect(() => {\r\n    const preExperimentStabilization = shuffle(ImagesFileNames).slice(0, 3)\r\n    const fileNames = [...preExperimentStabilization, ...shuffle(ImagesFileNames)]\r\n    setFileNames(fileNames)\r\n\r\n    setExperimentStepData({\r\n      currentImageIndex: 1,\r\n      imagesCount: fileNames.length,\r\n      imageSource: fileNames[0]\r\n    })\r\n  }, [])\r\n\r\n  const saveData = (imageRating, imageSource, timeStart) => {\r\n    console.log(fileNames)\r\n    console.log(imageSource, imageRating, timeStart)\r\n    const currentImageIndex = experimentStepData.currentImageIndex + 1\r\n\r\n    if (currentImageIndex > experimentStepData.imagesCount) {\r\n      setExperimentFinished(true)\r\n    }\r\n\r\n    const currentDataRow = [isName, imageSource, imageRating, timeStart]\r\n    setExperimentData([...experimentData, currentDataRow])\r\n\r\n    setExperimentStepData({\r\n      currentImageIndex: currentImageIndex,\r\n      imagesCount: experimentStepData.imagesCount,\r\n      imageSource: fileNames[currentImageIndex - 1]\r\n    })\r\n  }\r\n\r\n  const experimentStep = (\r\n    <ExperimentStep\r\n      imageSource={experimentStepData.imageSource}\r\n      currentImageIndex={experimentStepData.currentImageIndex}\r\n      imagesCount={experimentStepData.imagesCount}\r\n      saveData={saveData}\r\n    />\r\n  )\r\n\r\n  const experimentFinished = <ExperimentFinished experimentData={experimentData} />\r\n\r\n  return (\r\n    <>\r\n      {isName === '' ? <InputName setIsName={setIsName} /> : ''}\r\n      {isName !== '' && !isExperimentFinished ? experimentStep : ''}\r\n      {isExperimentFinished ? experimentFinished : ''}\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}